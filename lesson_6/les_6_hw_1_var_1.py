"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);
проанализировать 3 варианта и выбрать оптимальный;

c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной,
а проявили творчество, фантазию и создали универсальный код для замера памяти.
"""

import sys
import os
import platform

print(f'Версия Python: {sys.version}')
# Вывод:
# Версия Python: 3.9.0 (v3.9.0:9cf6752276, Oct  5 2020, 11:29:23)
# [Clang 6.0 (clang-600.0.57)]

print(f'Операционная система: {sys.platform}')
# Вывод:
# Операционная система: darwin

print(f'Подробная информация об Операционной системе: {os.uname()}')
# Вывод:
# posix.uname_result(sysname='Darwin', nodename='MacBook-Pro-ххххх.local', release='19.6.0',
# version='Darwin Kernel Version 19.6.0: Mon Aug 31 22:12:52 PDT 2020; root:xnu-6153.141.2~1/RELEASE_X86_64',
# machine='x86_64')

print(f'Разрядность интерпретатора Python: {platform.architecture()}')
# Вывод:
# ('64bit', '')

print('*' * 70)
print()


# функция расчета используемой памяти
def show_size(tpl):  # в качестве параметров - список используемых переменных
    s = 0
    for i in tpl:
        print('\t', f'Переменной {type(i)} выделено {sys.getsizeof(i)} байт')
        s += sys.getsizeof(i)
    print('*' * 60)

    return f'Общий объем памяти, занимаемый переменными равен: {s} байт'


"""
Для исследования возьмем задачу №5, третьего урока.
5. В массиве найти максимальный отрицательный элемент. Вывести на экран его значение и позицию в массиве.
Примечание к задаче: пожалуйста не путайте «минимальный» и «максимальный отрицательный». Это два абсолютно разных
значения.
"""

# Вариант 1
import random

size = 10
a = [random.randint(-100, 100) for _ in range(size)]  # заполняем исходный массив значениями, включая отрицательные

x_i = -1  # присваиваем начальное значение переменной, которой присвоим индекс искомого эелемента.
# Если значение останется -1, значит наш массив не содрежит отрицательных элементов

for i, x in enumerate(a):  # организуем цикл обхода по нашему массиву
    if x < 0 and x_i == -1:  # для первого отрицательного элемента
        x_i = i
    elif x < 0 and x < a[x_i]:  # если отрицательных элементов больше одного и элемент меньше запомненного
        x_i = i

# Выводим результат
print('Вариант 1')
print(f'Исходный массив {a}.')
if x_i == -1:
    print(f'Массив не содержит отрицательных элементов')
else:
    print(f'Максимальный отрицательный элемент = {a[x_i]}, позиция в массиве -  {x_i}')


# Анализ используемой памяти Вариант 1.
print()
print('*' * 70)
print('Статистика программы по использованию перемнных и занимаемой памяти:')
var_list = (size, a, x_i, i, x)
print(show_size(var_list))
print()
# Статистика программы по использованию перемнных и занимаемой памяти:
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'list'> выделено 184 байт
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'int'> выделено 28 байт
# ************************************************************
# Общий объем памяти, занимаемый переменными равен: 296 байт

# Вариант 2
size = 10
a = [random.randint(-100, 100) for _ in range(size)]  # заполняем исходный массив значениями, включая отрицательные

x_i = -1  # присваиваем начальное значение переменной, которой присвоим индекс искомого эелемента.
# Если значение останется -1, значит наш массив не содрежит отрицательных элементов
i = 0

while i < size:
    if a[i] < 0 and x_i == -1:
        x_i = i
    elif 0 > a[i] > a[x_i]:
        x_i = i

    i += 1

# Выводим результат
print('Вариант 2')
print(f'Исходный массив {a}.')
if x_i == -1:
    print(f'Массив не содержит отрицательных элементов')
else:
    print(f'Максимальный отрицательный элемент = {a[x_i]}, позиция в массиве -  {x_i}')

# Анализ используемой памяти Вариант 1.
print()
print('*' * 70)
print('Статистика программы по использованию перемнных и занимаемой памяти:')
var_list = (size, a, x_i, i)
print(show_size(var_list))
print()
# Статистика программы по использованию перемнных и занимаемой памяти:
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'list'> выделено 184 байт
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'int'> выделено 28 байт
# ************************************************************
# Общий объем памяти, занимаемый переменными равен: 268 байт

# Вариант 3
size = 10
a = [random.randint(-100, 100) for _ in range(size)]  # заполняем исходный массив значениями, включая отрицательные

x_i = -1  # присваиваем начальное значение переменной, которой присвоим индекс искомого эелемента.
# Если значение останется -1, значит наш массив не содрежит отрицательных элементов

for i in range(size):
    if a[i] < 0 and x_i == -1:
        x_i = i
    elif 0 > a[i] > a[x_i]:
        x_i = i

# Выводим результат
print('Вариант 3')
print(f'Исходный массив {a}.')
if x_i == -1:
    print(f'Массив не содержит отрицательных элементов')
else:
    print(f'Максимальный отрицательный элемент = {a[x_i]}, позиция в массиве -  {x_i}')

# Анализ используемой памяти Вариант 1.
print()
print('*' * 70)
print('Статистика программы по использованию перемнных и занимаемой памяти:')
var_list = (size, a, x_i, i)
print(show_size(var_list))
print()
# Статистика программы по использованию перемнных и занимаемой памяти:
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'list'> выделено 184 байт
# 	 Переменной <class 'int'> выделено 28 байт
# 	 Переменной <class 'int'> выделено 28 байт
# ************************************************************
# Общий объем памяти, занимаемый переменными равен: 268 байт

"""
Общий вывод:
В силу малого количества переменных в программе, во всех вариантах объем используемой паяти практически одинаковый.
При прочих равных, Вариант 2 и 3, используют меньше памяти - 268 байт, чем Вариант 1 - 292 байт. 
Во всех вариантах можно уменьшить используемую память на 28 байт, заменив переменную size константным значением.
"""